Index: trial/trial_net.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\nsys.path.append('C:\\source\\Research Project\\Scripts\\Research-Project\\snakes-master')\r\nsys.path.append('C:\\source\\Research Project\\Scripts\\Research-Project')\r\nimport tpn\r\nimport snakes.plugins\r\nfrom snakes.utils.abcd import main\r\nfrom snakes.utils.simul import StateSpace\r\n\r\nsnakes.plugins.load([tpn, 'gv', 'bound'], 'snakes.nets', 'snk')\r\nfrom snk import *\r\n\r\nplcs = list('ACDEFGJKSTX')\r\nplcs.extend(['Green', 'Red']) #resources\r\n\r\ntrns = ['t_SA', 't_AC', 't_AE', 't_EF', 't_DF', 't_FD', 't_EG', 't_FG', \\\r\n        't_GJ', 't_JK', 't_KT', 't_T', 't_CX', 't_XD', 't_GCX', 't_RXD', \\\r\n        't_DX', 't_XC', 't_RDX', 't_GXC']\r\n\r\nclass TrialNet:\r\n    def __init__(self, jobs, resources, orders):\r\n        self.fs = jobs\r\n        self.cs = [0 for _ in jobs]\r\n        self.no_of_jobs = len(jobs)\r\n        self.res = resources[0]\r\n        self.red = resources[1]\r\n        self.green = resources[2]\r\n        self.orders = orders\r\n        if self.no_of_jobs != len(self.orders):\r\n            raise ValueError(\"length of number of jobs should be same as length of order\")\r\n        if sum(self.orders) != self.res:\r\n            raise ValueError(\"Total sum of orders should be equal to the resource[0]\")\r\n            \r\n    def tokens(self):\r\n        self.token = {}\r\n        for i in self.fs:\r\n            self.token[f'job{i}'] = (0, i, 0)\r\n        self.t_init = []\r\n        for i in range(self.no_of_jobs):\r\n            for k in range(self.orders[i]):\r\n                self.t_init.append(self.token[f'job{self.fs[i]}'])\r\n        self.t_red = [1 for _ in range(self.red)]\r\n        self.t_green = [2 for _ in range(self.green)]\r\n        return self.t_init, self.t_red, self.t_green\r\n    \r\n    def network(self, bounds = 5, minimum_time = 0, maximum_time = 5):\r\n        n = PetriNet('trial net')\r\n        n.globals.declare('c = 0')\r\n        n.globals.declare('f = 0')\r\n        self.init, self.r, self.g = self.tokens()\r\n        # adding places\r\n        for i in plcs:\r\n            if i == 'S':\r\n                n.add_place(Place('%s' % i, self.init, bound=(0, None)))\r\n            elif i == 'Green':\r\n                n.add_place(Place('%s' % i, self.g, bound=(0, None)))\r\n            elif i == 'Red':\r\n                n.add_place(Place('%s' % i, self.r, bound=(0, None)))\r\n            else:\r\n                n.add_place(Place('%s' % i, [], bound=bounds))\r\n        \r\n        # adding transitions\r\n        trans = {}\r\n        for i in trns:\r\n            if i == 't_T':\r\n                trans.update({i: Transition('%s' % i, Expression('c == f'), min_time=minimum_time + int(n.time() or 0),\r\n                                            max_time=maximum_time + int(n.time() or 0))})\r\n            else:\r\n                trans.update({i: Transition('%s' % i, min_time=minimum_time + int(n.time() or 0),\r\n                                            max_time=maximum_time + int(n.time() or 0))})\r\n            n.add_transition(trans[i])\r\n            \r\n        # adding input and output arcs\r\n        n.add_input('S', 't_SA', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('A', 't_SA', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('A', 't_AC', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('C', 't_AC', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('A', 't_AE', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('E', 't_AE', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('E', 't_EF', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('F', 't_EF', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('D', 't_DF', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('F', 't_DF', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('F', 't_FD', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('D', 't_FD', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('F', 't_FG', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('G', 't_FG', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('E', 't_EG', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('G', 't_EG', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('G', 't_GJ', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('J', 't_GJ', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('J', 't_JK', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('K', 't_JK', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('T', 't_T', Flush('x'))\r\n        n.add_input('K', 't_KT', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('T', 't_KT', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('C', 't_CX', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('X', 't_CX', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('X', 't_XC', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('C', 't_XC', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_input('C', 't_GCX', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_input('Green', 't_GCX', Variable('x'))\r\n        n.add_output('X', 't_GCX', Tuple([Expression('x + c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('X', 't_GXC', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_input('Green', 't_GXC', Variable('x'))\r\n        n.add_output('C', 't_GXC', Tuple([Expression('x + c'), Variable('f'), Variable('count')]))\r\n        n.add_input('D', 't_DX', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('X', 't_DX', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('X', 't_XD', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_output('D', 't_XD', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_input('D', 't_RDX', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_input('Red', 't_RDX', Variable('x'))\r\n        n.add_output('X', 't_RDX', Tuple([Expression('x + c'), Variable('f'), Expression('count + 1')]))\r\n        n.add_input('X', 't_RXD', Tuple([Variable('c'), Variable('f'), Variable('count')]))\r\n        n.add_input('Red', 't_RXD', Variable('x'))\r\n        n.add_output('D', 't_RXD', Tuple([Expression('x + c'), Variable('f'), Variable('count')]))\r\n        \r\n        return n, trans\r\n\r\ntrial_net = TrialNet([1], [7, 5, 5], [7])\r\nnet, t = trial_net.network()\r\nprint(net.get_marking())\r\ng = StateSpace(net)\r\nprint(g.get())\r\nm = g.modes(g.get())\r\nprint(g.succ(g.current, 0))\r\nprint(net.get_marking())\r\nprint(g.current)\r\nm = g.modes(g.get())\r\nprint(m)\r\nprint(net.get_marking())\r\nprint(g.succ(g.current, 0))\r\nm = g.modes(g.get())\r\nprint(m)\r\nprint(net.get_marking())\r\nprint(g.succ(g.current, slice(0, -1, 5)))\r\nm = g.modes(g.get())\r\nprint(m)\r\nprint(net.get_marking())\r\nnet.draw('trialnet.png')\r\nnet.reset()\r\nclock = 0.0\r\ndelay = net.time()\r\n#g = StateSpace(net)\r\n#print(g.current())\r\nmode = t['t_SA'].modes()\r\n#print(mode)\r\nclock += delay\r\n#t['t_SA'].fire(mode[0])\r\n#print(net.get_marking())\r\n\r\nnet.draw('first_fire.png')\r\n#print(g.current())\r\n# g.build()\r\n# print(list(g.successors))\r\n\r\n    \r\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/trial/trial_net.py b/trial/trial_net.py
--- a/trial/trial_net.py	(revision a55e8b232aa6aa02266555ffae609b0f37187baf)
+++ b/trial/trial_net.py	(date 1634645803396)
@@ -70,7 +70,7 @@
             n.add_transition(trans[i])
             
         # adding input and output arcs
-        n.add_input('S', 't_SA', Tuple([Variable('c'), Variable('f'), Variable('count')]))
+        n.add_input('S', 't_SA', Tuple([Value(0), Variable('c'), Variable('f'), Variable('count')]))
         n.add_output('A', 't_SA', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))
         n.add_input('A', 't_AC', Tuple([Variable('c'), Variable('f'), Variable('count')]))
         n.add_output('C', 't_AC', Tuple([Variable('c'), Variable('f'), Expression('count + 1')]))
Index: environment_controller.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Tue Sep 14 12:19:42 2021\r\n\r\n@author: busach\r\n\"\"\"\r\n\r\nimport subprocess\r\nimport gym\r\nfrom gym import spaces\r\nimport logging\r\nimport multiprocessing\r\nimport time\r\nimport matplotlib.pyplot as plt\r\nimport psutil\r\nimport pathlib as Path\r\nimport os\r\nimport sys\r\n\r\ndef configure_logger():\r\n    timestamp = time.strftime(\"%Y-%m-%d\")\r\n    _logger = logging.getLogger(__name__)\r\n    _logger.setLevel(logging.INFO)\r\n    Path(\"./logs\").mkdir(parents=True, exist_ok=True)\r\n    file_handler = logging.FileHandler('./logs/application-main-'+timestamp+'.log')\r\n    file_handler.setLevel(logging.INFO)\r\n    _logger.addHandler(file_handler)\r\n    formatter = logging.Formatter('%(asctime)s  %(name)s  %(levelname)s: %(message)s')\r\n    file_handler.setFormatter(formatter)\r\n    return _logger  \r\n\r\nlogger = configure_logger()\r\n\r\nclass Cfms(gym.Env):\r\n    metadata = {'render.modes' : ['human']}\r\n\r\n    def __init__(self, ):\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/environment_controller.py b/environment_controller.py
--- a/environment_controller.py	(revision a55e8b232aa6aa02266555ffae609b0f37187baf)
+++ b/environment_controller.py	(date 1634637353487)
@@ -16,6 +16,8 @@
 import pathlib as Path
 import os
 import sys
+sys.path.append('C:\source\Research Project\Scripts\Research-Project\\trial')
+import trial_net
 
 def configure_logger():
     timestamp = time.strftime("%Y-%m-%d")
@@ -30,9 +32,8 @@
     return _logger  
 
 logger = configure_logger()
-
-class Cfms(gym.Env):
-    metadata = {'render.modes' : ['human']}
-
-    def __init__(self, ):
-
+#
+# class Cfms(gym.Env):
+#     metadata = {'render.modes' : ['human']}
+#
+#     def __init__(self, ):
